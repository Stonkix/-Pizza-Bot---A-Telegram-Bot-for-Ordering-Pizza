import telebot
from telebot import types
import sqlite3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = 'Insert your token here.'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('pizza_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é
def init_menu():
    menu = {
        "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": {"–ú–∞–ª–µ–Ω—å–∫–∞—è": 250, "–°—Ä–µ–¥–Ω—è—è": 400, "–ë–æ–ª—å—à–∞—è": 550},
        "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏": {"–ú–∞–ª–µ–Ω—å–∫–∞—è": 300, "–°—Ä–µ–¥–Ω—è—è": 450, "–ë–æ–ª—å—à–∞—è": 600},
        "4 —Å—ã—Ä–∞": {"–ú–∞–ª–µ–Ω—å–∫–∞—è": 350, "–°—Ä–µ–¥–Ω—è—è": 500, "–ë–æ–ª—å—à–∞—è": 650}
    }
    cursor.execute("DELETE FROM menu")  # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    for pizza, sizes in menu.items():
        for size, price in sizes.items():
            cursor.execute("INSERT INTO menu (pizza_name, size, price) VALUES (?, ?, ?)", (pizza, size, price))
    conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_menu()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = message.from_user.first_name

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–∏—Ü—Ü–µ—Ä–∏–∏! üçï\n–í–≤–µ–¥–∏—Ç–µ /open_menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, welcome_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    with open("pizza_welcome.jpg", "rb") as photo:
        bot.send_photo(message.chat.id, photo, caption="–í–æ—Ç –Ω–∞—à –ø–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è –≤–∞—Å! üçï")

# –ö–æ–º–∞–Ω–¥–∞ /open_menu
@bot.message_handler(commands=['open_menu'])
def open_menu(message):
    cursor.execute("SELECT * FROM menu")
    menu_items = cursor.fetchall()
    menu_text = "\U0001F355 –ú–µ–Ω—é:\n"
    for item in menu_items:
        menu_text += f"\n{item[1]} ({item[2]}): {item[3]} ‚ÇΩ\n"
    bot.send_message(message.chat.id, menu_text)

# –ö–æ–º–∞–Ω–¥–∞ /order_pizza
@bot.message_handler(commands=['order_pizza'])
def order_pizza(message):
    cursor.execute("SELECT DISTINCT pizza_name FROM menu")
    pizzas = cursor.fetchall()
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for pizza in pizzas:
        markup.add(types.KeyboardButton(pizza[0]))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, choose_size)

def choose_size(message):
    pizza = message.text
    cursor.execute("SELECT size FROM menu WHERE pizza_name = ?", (pizza,))
    sizes = cursor.fetchall()
    if not sizes:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –ø–∏—Ü—Ü—ã –Ω–µ—Ç –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /order_pizza")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for size in sizes:
        markup.add(types.KeyboardButton(size[0]))
    msg = bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {pizza}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=markup)
    bot.register_next_step_handler(msg, confirm_order, pizza)

def confirm_order(message, pizza):
    size = message.text
    cursor.execute("SELECT price FROM menu WHERE pizza_name = ? AND size = ?", (pizza, size))
    price = cursor.fetchone()
    if not price:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /order_pizza")
        return

    user_id = message.chat.id
    cursor.execute("INSERT INTO orders (user_id, pizza_name, size, price) VALUES (?, ?, ?, ?)", (user_id, pizza, size, price[0]))
    conn.commit()
    bot.send_message(message.chat.id, f"–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω: {pizza} ({size}) - {price[0]} ‚ÇΩ")

# –ö–æ–º–∞–Ω–¥–∞ /edit_order
@bot.message_handler(commands=['edit_order'])
def edit_order(message):
    user_id = message.chat.id
    cursor.execute("SELECT * FROM orders WHERE user_id = ?", (user_id,))
    user_orders = cursor.fetchall()
    if not user_orders:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –í–≤–µ–¥–∏—Ç–µ /order_pizza, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for i, order in enumerate(user_orders):
        markup.add(types.KeyboardButton(f"{i + 1}. {order[2]} ({order[3]}) - {order[4]} ‚ÇΩ"))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, edit_order_step)

def edit_order_step(message):
    try:
        order_index = int(message.text.split('.')[0]) - 1
        user_id = message.chat.id
        cursor.execute("SELECT * FROM orders WHERE user_id = ?", (user_id,))
        user_orders = cursor.fetchall()
        if order_index < 0 or order_index >= len(user_orders):
            raise ValueError

        order = user_orders[order_index]
        bot.send_message(message.chat.id, f"–ò–∑–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑: {order[2]} ({order[3]}) - {order[4]} ‚ÇΩ")

        markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
        cursor.execute("SELECT DISTINCT pizza_name FROM menu")
        pizzas = cursor.fetchall()
        for pizza in pizzas:
            markup.add(types.KeyboardButton(pizza[0]))
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–∏—Ü—Ü—É:", reply_markup=markup)
        bot.register_next_step_handler(msg, edit_order_choose_pizza, order_index)
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /edit_order")

def edit_order_choose_pizza(message, order_index):
    pizza = message.text
    cursor.execute("SELECT size FROM menu WHERE pizza_name = ?", (pizza,))
    sizes = cursor.fetchall()
    if not sizes:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –ø–∏—Ü—Ü—ã –Ω–µ—Ç –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /edit_order")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for size in sizes:
        markup.add(types.KeyboardButton(size[0]))
    msg = bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {pizza}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=markup)
    bot.register_next_step_handler(msg, edit_order_confirm, order_index, pizza)

def edit_order_confirm(message, order_index, pizza):
    size = message.text
    cursor.execute("SELECT price FROM menu WHERE pizza_name = ? AND size = ?", (pizza, size))
    price = cursor.fetchone()
    if not price:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /edit_order")
        return

    user_id = message.chat.id
    cursor.execute("SELECT * FROM orders WHERE user_id = ?", (user_id,))
    user_orders = cursor.fetchall()
    order_id = user_orders[order_index][0]
    cursor.execute("UPDATE orders SET pizza_name = ?, size = ?, price = ? WHERE id = ?", (pizza, size, price[0], order_id))
    conn.commit()
    bot.send_message(message.chat.id, f"–ó–∞–∫–∞–∑ –∏–∑–º–µ–Ω—ë–Ω: {pizza} ({size}) - {price[0]} ‚ÇΩ")

# –ö–æ–º–∞–Ω–¥–∞ /delete_order
@bot.message_handler(commands=['delete_order'])
def delete_order(message):
    user_id = message.chat.id
    cursor.execute("SELECT * FROM orders WHERE user_id = ?", (user_id,))
    user_orders = cursor.fetchall()
    if not user_orders:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for i, order in enumerate(user_orders):
        markup.add(types.KeyboardButton(f"{i + 1}. {order[2]} ({order[3]}) - {order[4]} ‚ÇΩ"))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, delete_order_step)

def delete_order_step(message):
    try:
        order_index = int(message.text.split('.')[0]) - 1
        user_id = message.chat.id
        cursor.execute("SELECT * FROM orders WHERE user_id = ?", (user_id,))
        user_orders = cursor.fetchall()
        if order_index < 0 or order_index >= len(user_orders):
            raise ValueError

        order_id = user_orders[order_index][0]
        cursor.execute("DELETE FROM orders WHERE id = ?", (order_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω.")
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /delete_order")

# –ö–æ–º–∞–Ω–¥–∞ /show_orders
@bot.message_handler(commands=['show_orders'])
def show_orders(message):
    user_id = message.chat.id
    cursor.execute("SELECT * FROM orders WHERE user_id = ?", (user_id,))
    user_orders = cursor.fetchall()
    if not user_orders:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    order_text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
    for i, order in enumerate(user_orders):
        order_text += f"{i + 1}. {order[2]} ({order[3]}) - {order[4]} ‚ÇΩ\n"
    bot.send_message(message.chat.id, order_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)